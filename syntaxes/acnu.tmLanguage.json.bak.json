{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "acnu",
	"patterns": [{
			"include": "#comments"
		},
		{
			"include": "#declare-variable"
		},
		{
			"include": "#number"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#string"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#macro-endmacro"
		},
		{
			"include": "#variable-assignment"
		},
		{
			"include": "#macro-call"
		},
		{
			"include": "#array"
		},
		{
			"include": "#expression"
		},
		{
			"include": "#if-function"
		},
		{
			"include": "#variable"
		}


	],
	"repository": {
		"data-types" :{
			"patterns": [
				{
					"include": "#number"
				},
				{
					"include": "#string"
				},
				{
					"include": "#array"
				}
			]
		},
		


		"declare-variable": {
			"match": "(?i)\\s*(?i)(declare|pdeclare)\\s*(?i)(global|cglobal|mglobal)?\\s*(?i)(norec||noshow)?\\s*(?i)(DEF)?(\\s*=\\s*\\w+)?\\s*(?i)(INT)?(?i)(STRING)?(?i)(REAL)?\\s*(?i)(.*)",
			"captures": {
				"1": {
					"name": "keyword.other"
				},
				"2": {
					"name": "storage.modifier.acnu"
				},
				"3": {
					"name": "storage.type.acnu"
				},
				"4": {
					"name": "storage.type.acnu"
				},
				"5": {
					"name": "constant.numeric.acnu"
				},
				"6": {
					"name": "support.type.acnu"
				},
				"7": {
					"name": "support.type.acnu"
				},
				"8": {
					"name": "support.type.acnu"
				},
				"9": {
					"name": "support.variable.acnu"
				}
			}
		},
		"variable-assignment": {
			"patterns": [{
				"match": "(?i)\\s*([a-zA-Z0-9\\-_]*)(\\s*=\\s*)([a-z0-9A-Z\\-_]*)",
				"captures": {
					"1": {
						"patterns": [{
							"include": "#variable"
						}]
					},
					"2": {
						"name": "keyword.operator.assignment.acnu"
					},
					"3": {
						"patterns": [{
								"include": "#number"
							},
							{
								"include": "#variable"
							},
							{
								"include": "#string"
							}
						]
					}
				}
			}]
		},
		"variable": {
			"patterns": [{
				"match": "\\s*(?i)[a-zA-Z0-9_\\-]*",
				"name": "support.variable.acnu"
			}]
		},
		"number": {
			"patterns": [{
				"match": "\\s*[+-]{0,1}[0-9]+\\.{0,1}[0-9]*",
				"name": "constant.numeric.acnu"
			}]
		},
		"array": {
			"patterns": [{
				"match": "\\s*([$]?\\w*)(.*)",
				"captures": {
					"1": {
						"name": "variable.other.object.acnu"
					},
					"2": {
						"name": "meta.brace.square"
					},
					"3": {

						"patterns": [{
								"include": "#square-brackets"
							}
						]
					},
					"4":{
						"name": "meta.brace.square"
					}
				}
			}]
		},
		"square-brackets": {
			"name": "meta.brace.square.acnu",
			"begin": "[",
			"end": "]",
			"patterns": [
				{
					"include": "#number"
				},
				{
					"include": "#variable"
				},
				{
					"include": "#comma"
				}
			]
		},
		"comma":{
			"name": "meta.delimiter.comma",
			"match": "[,]+"
		},
		"keywords": {
			"patterns": [{
					"name": "keyword.operator.arithmetic.acnu",
					"match": "\\b(?i)(\\+|=|-|/|%)\\b"
				},
				{
					"name": "keyword.control.acnu",
					"match": "\\b(?i)(while|for|return|continue|break)\\b"
				}
			]
		},
		"string": {
			"name": "string.quoted.double.acnu",
			"begin": "\"",
			"end": "\"",
			"patterns": [{
				"name": "constant.character.escape.acnu",
				"match": "\\\\."
			}]
		},
		"expression": {
			"name": "keyword.operator",
			"patterns": [{
					"name": "keyword.operator.logical.acnu",
					"match": "(?i)(\\|\\||&&)"
				},
				{
					"name": "keyword.operator.comparison.acnu",
					"match": "(?i)(<|>|==|!=)"
				}
			]
		},
		"comments": {
			"name": "comment.line.number-sign.acnu",
			"begin": "#",
			"end": "\n"
		},
		"paren-expression": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.open.acnu"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.close.acnu"
				}
			},
			"name": "expression.group.acnu",
			"patterns": [{
					"include": "#expression"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#variable"
				},
				{
					"include": "#array"
				}
			]

		},
		"macro-call": {
			"match": "(?i)\\s*([a-zA-Z0-9_\\-]*)(\\((.)*\\))",
			"captures": {
				"1": {
					"name": "entity.name.function.acnu"
				},
				"2": {
					"patterns": [{
						"include": "#macro-parameters"
					}]
				}
			}
		},
		"macro-parameters": {
			"name": "expression.group.acnu",
			"patterns": [{
					"include": "#number"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#string"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#variable-assignment"
				},
				{
					"include": "#array"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#variable"
				}

			]

		},
		"macro-endmacro": {
			"begin": "((?i)macro=)([a-zA-Z0-9_]+)(?:\\(([^)]*)\\))?,?([A-Za-z,_]*)",
			"beginCaptures": {
				"0": {
					"name": "markup.underline.acnu"
				},
				"1": {
					"name": "variable.other.readwrite.acnu"
				},
				"2": {
					"name": "entity.name.function.acnu"
				},
				"3": {
					"name": "this should be checked as parameters that are passed to function, like variable highlighting etc"
				},
				"4": {
					"name": "keyword.control"
				}

			},
			"end": "\\s*((?i)endmacro)\\s*",
			"endCaptures": {
				"0": {
					"name": "markup.underline.acnu"
				},
				"1": {
					"name": "variable.other.readwrite.acnu"
				}
			},
			"patterns": [{
					"include": "#comments"
				},
				{
					"include": "#declare-variable"
				},
				{
					"include": "number"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#string"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#macro-call"
				},
				{
					"include": "#variable-assignment"
				},
				{
					"include": "#array"
				},
				{
					"include": "#if-function"
				},
				{
					"include": "#variable"
				}
			]
		},
		"constants": {
			"patterns": [{
				"name": "keyword.constant",
				"match": "\\s*((?i)CNST)(\\()(.+)(\\))",
				"captures": {
					"1": {
						"name": "constant.language.symbol-type.acnu"
					},
					"2": {
						"name":"punctuation.paren.open.acnu"
					},
					"3":{
						"name":"constant.language.acnu"
					},
					"4":{
						"name":"punctuation.paren.close.acnu"
					}
				}

			}]
		},
		"if-function":{
			"begin": "\\s*(?i)(if)\\s*(\\(.*\\))\\s*(then)$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.acnu"
				},
				"2": {
					"patterns": [
						{
							"include": "#paren-expression"
						},
						{
							"include": "#number"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#string"
						},
						{
							"include": "#constants"
						},
						{
							"include": "#operators"
						},
						{
							"include": "#array"
						},
						{
							"include": "#variable"
						},
						{
							"include": "#variable-assignment"
						}

					]
				},
				"3": {
					"name": "keyword.control.conditional.acnu"
				}
			},
			"end": "\\s*((?i)endif)\\s*$",
			"endCaptures": {
				"1": {
					"name": "keyword.control.conditional.acnu"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#declare-variable"
				},
				{
					"include": "#number"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#string"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#variable-assignment"
				},
				{
					"include": "#macro-call"
				},
				{
					"include": "#array"
				},
				{
					"include": "#else-if"
				},
				{
					"include": "#if-function"
				}

			]
		},
		"else-if": {
			"patterns": [{
					"name": "keyword.control.flow.acnu",
					"match": "\\b(?i)(else|elseif)\\b"
				}
			]
		}



	},
	"scopeName": "source.acnu"
}